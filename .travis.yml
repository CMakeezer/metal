# Copyright Bruno Dutra 2015-2016
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.txt or copy at http://boost.org/LICENSE_1_0.txt)

os: linux
sudo: false
language: cpp

git:
  depth: 1

env:
    global:
      - secure: "DuBGzmeKiWMm5m0+uZhutjzCffB2PbixmuMm3IZWUi7/uAam4PPI37oeqVTIytxxfpgRvfR2ah75eJyU6ab72MBoHxGkHem10RAvhC/vPYbLZu545qfSGatyTI9R6NfERUxi7YIxjs6D8c4D/5k3gMoCbMUkU1Lze1708lknh5U="

    matrix:
      - BOGUS_JOB=true

addons:
    apt:
        packages: &base_packages
          - cmake
          - cmake-data
        sources: &base_sources
          - george-edison55-precise-backports
          - ubuntu-toolchain-r-test

matrix:
    exclude:
      - env: BOGUS_JOB=true

    include:
      - env: BUILD_DOC=true

      - compiler: clang++
        env: CXX_VERSION=3.5
        addons:
            apt:
                packages:
                  - *base_packages
                  - libstdc++-4.8-dev
                sources: *base_sources

      - compiler: clang++
        env: CXX_VERSION=3.6
        addons:
            apt:
                packages:
                  - *base_packages
                  - libstdc++-4.8-dev
                sources: *base_sources

      - compiler: clang++
        env: CXX_VERSION=3.7
        addons:
            apt:
                packages:
                  - *base_packages
                  - libstdc++-4.8-dev
                sources: *base_sources

      - compiler: clang++
        env: CXX_VERSION=3.8
        addons:
            apt:
                packages:
                  - *base_packages
                  - libstdc++-4.8-dev
                sources: *base_sources

      - compiler: g++
        env: CXX_VERSION=4.9
        addons:
            apt:
                packages:
                  - *base_packages
                  - g++-4.9
                sources: *base_sources

      - compiler: g++
        env: CXX_VERSION=5
        addons:
            apt:
                packages:
                  - *base_packages
                  - g++-5
                sources: *base_sources

before_install:
  - git config --global user.name "Travis Bot"
  - git config --global user.email "\<\>"

  - METAL_SOURCE_PATH="${TRAVIS_BUILD_DIR}"
  - EXTERNAL_SOURCE_PATH="${METAL_SOURCE_PATH}/example/external/"

  - METAL_BUILD_PATH="${TRAVIS_BUILD_DIR}/build"
  - mkdir -p "${METAL_BUILD_PATH}"

  - METAL_INSTALL_PATH="${TRAVIS_BUILD_DIR}/install"
  - mkdir -p "${METAL_INSTALL_PATH}"

  - EXTERNAL_BUILD_PATH="${METAL_BUILD_PATH}/example/external/"
  - mkdir -p "${EXTERNAL_BUILD_PATH}"

  - DEPS_PATH="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_PATH}"

  - |
    if [[ -n "${TRAVIS_TAG}" ]]
    then
        METAL_VERSION="${TRAVIS_TAG}"
    else
        METAL_VERSION=$( \
            curl -Ls https://github.com/brunocodutra/metal/tags | \
            awk '/tag-name/{print $3;exit}' FS='[<>]' \
        )
    fi

  - METAL_VERSION="${METAL_VERSION%%-*}"
  - METAL_VERSION="${METAL_VERSION##*v}"
  - echo "METAL_VERSION=${METAL_VERSION}"

install:
  - |
    if [[ "${BUILD_DOC}" == "true" ]]
    then
        # download the latest doxygen available
        DOXYGEN_FTP="ftp://ftp.stack.nl/pub/users/dimitri/"
        DOXYGEN_PKG=$(travis_retry curl -Ls "${DOXYGEN_FTP}" | grep -Eo "doxygen-[0-9.]+linux[.]bin[.]tar[.]gz" | sort -V | tail -1)
        DOXYGEN_URL="${DOXYGEN_FTP}/${DOXYGEN_PKG}"
        echo "${DOXYGEN_URL}"
        mkdir -p "${DEPS_PATH}/doxygen" &&
        travis_retry curl -L "${DOXYGEN_URL}" | tar --strip-components=1 -xz -C "${DEPS_PATH}/doxygen"
        export PATH="${DEPS_PATH}/doxygen/bin:${PATH}"
    fi

  - |
    if [[ "${CXX}" == "clang++" ]]
    then
        # manually download clang and libc++
        CLANG_URL="http://llvm.org/releases/${CXX_VERSION}.0/clang+llvm-${CXX_VERSION}.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz"
        echo "${CLANG_URL}"
        mkdir -p "${DEPS_PATH}/clang" &&
        travis_retry curl -L "${CLANG_URL}" | tar --strip-components=1 -xJ -C "${DEPS_PATH}/clang" &&
        ln -s "${DEPS_PATH}/clang/bin/clang++" "${DEPS_PATH}/clang/bin/clang++-${CXX_VERSION}"
        export PATH="${DEPS_PATH}/clang/bin:${PATH}"

        LLVM_URL="http://llvm.org/releases/${CXX_VERSION}.0/llvm-${CXX_VERSION}.0.src.tar.xz"
        echo "${LLVM_URL}"
        mkdir -p "${DEPS_PATH}/llvm" &&
        travis_retry curl -L "${LLVM_URL}" | tar --strip-components=1 -xJ -C "${DEPS_PATH}/llvm"

        LIBCXX_URL="http://llvm.org/releases/${CXX_VERSION}.0/libcxx-${CXX_VERSION}.0.src.tar.xz"
        echo "${LIBCXX_URL}"
        mkdir -p "${DEPS_PATH}/llvm/projects/libcxx" &&
        travis_retry curl -L "${LIBCXX_URL}" | tar --strip-components=1 -xJ -C "${DEPS_PATH}/llvm/projects/libcxx"

        LIBCXXABI_URL="http://llvm.org/releases/${CXX_VERSION}.0/libcxxabi-${CXX_VERSION}.0.src.tar.xz"
        echo "${LIBCXXABI_URL}"
        mkdir -p "${DEPS_PATH}/llvm/projects/libcxxabi" &&
        travis_retry curl -L "${LIBCXXABI_URL}" | tar --strip-components=1 -xJ -C "${DEPS_PATH}/llvm/projects/libcxxabi"

        mkdir -p "${DEPS_PATH}/llvm/build" &&
        (cd "${DEPS_PATH}/llvm/build" && cmake .. -DCMAKE_INSTALL_PREFIX="${DEPS_PATH}/llvm/install") &&
        (cd "${DEPS_PATH}/llvm/build/projects/libcxx" && make install -j2) &&
        (cd "${DEPS_PATH}/llvm/build/projects/libcxxabi" && make install -j2)

        export CXXFLAGS="-stdlib=libc++ -nostdinc++ -isystem ${DEPS_PATH}/llvm/install/include/c++/v1"
        export LDFLAGS="-L ${DEPS_PATH}/llvm/install/lib -l c++ -l c++abi"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_PATH}/llvm/install/lib"
    fi

before_script:
  - CMAKE_ARGS=("-DCMAKE_INSTALL_PREFIX=${METAL_INSTALL_PATH}")
  - |
    if [[ -n "${CXX}" && -n "${CXX_VERSION}" ]]
    then
        CMAKE_ARGS+=("-DCMAKE_CXX_COMPILER=${CXX}-${CXX_VERSION}")
    fi

  - (cd "${METAL_BUILD_PATH}" && cmake "${METAL_SOURCE_PATH}" ${CMAKE_ARGS[@]} && make install)

  - CMAKE_ARGS+=("-DCMAKE_PREFIX_PATH=${METAL_INSTALL_PATH}")
  - |
    if [[ -n "${METAL_VERSION}" ]]
    then
        CMAKE_ARGS+=("-DMETAL_VERSION=${METAL_VERSION}")
    fi

  - |
    if [[ "${BUILD_DOC}" != "true" ]]
    then
      (cd "${EXTERNAL_BUILD_PATH}" && cmake "${EXTERNAL_SOURCE_PATH}" ${CMAKE_ARGS[@]})
    fi

script:
  - |
    if [[ "${BUILD_DOC}" == "true" ]]
    then
        (cd "${METAL_BUILD_PATH}" && make doc) &&
        if [[ "${TRAVIS_BRANCH}" == "master" && "${TRAVIS_PULL_REQUEST}" == "false" ]]
        then
            git clone https://brunocodutra:${GITHUB_TOKEN}@github.com/brunocodutra/metal -q --depth 1 --branch=gh-pages "${METAL_BUILD_PATH}/doc/gh-pages" &> /dev/null &&
            cp -r "${METAL_BUILD_PATH}/doc/gh-pages/.git/" "${METAL_BUILD_PATH}/doc/html/" &> /dev/null &&
            git -C "${METAL_BUILD_PATH}/doc/html/" add --all . &> /dev/null &&
            git -C "${METAL_BUILD_PATH}/doc/html/" commit --allow-empty -m "updating to $(git -C ${METAL_SOURCE_PATH} rev-parse --short HEAD)" &> /dev/null &&
            git -C "${METAL_BUILD_PATH}/doc/html/" push origin gh-pages &> /dev/null
        fi
    else
        (cd "${EXTERNAL_BUILD_PATH}" && make all) &&
        (cd "${METAL_BUILD_PATH}" && ctest --output-on-failure)
    fi
